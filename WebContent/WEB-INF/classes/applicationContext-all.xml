<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

    <context:component-scan base-package="com.scy" />
    
    <!-- 配置数据源,让spring找到jdbc.properties -->
    <bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" >
    	<property name="locations">
    		<list>
    			<value>classpath:jdbc.properties</value>
    		</list>
    	</property>
    </bean>
    
    <!-- 配置c3p0连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
    	<property name="driverClass" value="${jdbc.driver}" />
        <property name="jdbcUrl" value="${jdbc.url}" />  
        <property name="user" value="${jdbc.username}" />  
        <property name="password" value="${jdbc.password}" />  
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->   
        <property name="acquireIncrement" value="${c3p0.acquireIncrement}" />  
        <!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->   
        <property name="initialPoolSize" value="${c3p0.initialPoolSize}" />  
        <property name="minPoolSize" value="${c3p0.minPoolSize}" />  
        <property name="maxPoolSize" value="${c3p0.maxPoolSize}" />  
        <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->   
        <property name="maxIdleTime" value="${c3p0.maxIdleTime}" />  
        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->   
        <property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}" />  
        <!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements   
                            属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。   
                            如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->   
        <property name="maxStatements" value="${c3p0.maxStatements}" />  
        <!-- c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 通过  
                                  多线程实现多个操作同时被执行。Default: 3-->   
        <property name="numHelperThreads" value="${c3p0.numHelperThreads}" />  
    </bean>
    
    <!-- 创建SqlSessionFactory，同时指定数据源 -->
    <bean id="sqlSessionFactory"  class="org.mybatis.spring.SqlSessionFactoryBean">            
	    <property name="dataSource" ref="dataSource" />         
	    <property name="configLocation"  value="classpath:mybatisConfig.xml"></property>  
	    <!-- 自动扫描mapping.xml文件，**表示迭代查找,也可在sqlMapConfig.xml中单独指定xml文件-->
        <!-- <property name="mapperLocations" value="classpath:com/scy/pojo/*.xml" />  -->     
	</bean> 
	
	<!-- 由spring管理mybatis的事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
     
    <tx:advice id="txAdivce" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*"  propagation="REQUIRED" rollback-for="SQLException"/>
            <tx:method name="udpate*" propagation="REQUIRED" rollback-for="SQLException"/>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="SQLException"/>
        </tx:attributes>
    </tx:advice>
     
    <aop:config>
        <aop:pointcut id="pointcut" expression="execution(* com.scy.service.impl.*.*(..))" />
        <aop:advisor advice-ref="txAdivce" pointcut-ref="pointcut"/>
    </aop:config>
    
    <!-- 配置事务拦截器 -->
    <!-- <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<props>
		    <prop key="insert*">PROPAGATION_REQUIRED</prop>
		    <prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
		    <prop key="get*">PROPAGATION_REQUIRED</prop>
		    <prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>
		    <prop key="create*">PROPAGATION_REQUIRED</prop>
		    <prop key="delete*">PROPAGATION_REQUIRED</prop>
		    <prop key="del*">PROPAGATION_REQUIRED</prop>
		    <prop key="update*">PROPAGATION_REQUIRED</prop>
		    <prop key="start*">PROPAGATION_REQUIRED</prop>
		    <prop key="cancel*">PROPAGATION_REQUIRED</prop>
		    <prop key="stop*">PROPAGATION_REQUIRED</prop>
		    <prop key="save*">PROPAGATION_REQUIRED</prop>
		    <prop key="add*">PROPAGATION_REQUIRED</prop>
		    <prop key="update*">PROPAGATION_REQUIRED</prop>
		    <prop key="remove*">PROPAGATION_REQUIRED</prop>
		    <prop key="pay*">PROPAGATION_REQUIRED</prop>
		    <prop key="verify*">PROPAGATION_REQUIRED</prop>
		   </props>
		</property>
	</bean>
	
	<bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<list>
				<value>*Service</value>
			</list>
		</property>
		<property name="interceptorNames">
			<list>
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>	 -->
	
</beans>    